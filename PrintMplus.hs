{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintMplus where

-- pretty-printer generated by the BNF converter

import AbsMplus
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))



instance Print Prog where
  prt i e = case e of
    Prog1 block -> prPrec i 0 (concatD [prt 0 block])

instance Print Block where
  prt i e = case e of
    Block1 decls progbody -> prPrec i 0 (concatD [prt 0 decls, prt 0 progbody])

instance Print Decl where
  prt i e = case e of
    Decl1 vardecl -> prPrec i 0 (concatD [prt 0 vardecl])
    Decl2 fundecl -> prPrec i 0 (concatD [prt 0 fundecl])
  prtList _ [] = (concatD [])
  prtList _ [] = (concatD [])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Var_decl where
  prt i e = case e of
    Var_decl1 id arraydims type_ -> prPrec i 0 (concatD [doc (showString "var"), prt 0 id, prt 0 arraydims, doc (showString ":"), prt 0 type_])

instance Print Type where
  prt i e = case e of
    Type1 -> prPrec i 0 (concatD [doc (showString "int")])
    Type2 -> prPrec i 0 (concatD [doc (showString "real")])
    Type3 -> prPrec i 0 (concatD [doc (showString "bool")])

instance Print Array_dims where
  prt i e = case e of
    Array_dims1 expr arraydims -> prPrec i 0 (concatD [doc (showString "["), prt 0 expr, doc (showString "]"), prt 0 arraydims])
    Array_dims2 -> prPrec i 0 (concatD [])

instance Print Fun_decl where
  prt i e = case e of
    Fun_decl1 id paramlist type_ funblock -> prPrec i 0 (concatD [doc (showString "fun"), prt 0 id, prt 0 paramlist, doc (showString ":"), prt 0 type_, doc (showString "{"), prt 0 funblock, doc (showString "}")])

instance Print Fun_block where
  prt i e = case e of
    Fun_block1 decls funbody -> prPrec i 0 (concatD [prt 0 decls, prt 0 funbody])

instance Print Param_list where
  prt i e = case e of
    Param_list1 params -> prPrec i 0 (concatD [doc (showString "("), prt 0 params, doc (showString ")")])

instance Print Param where
  prt i e = case e of
    Param1 basicdecl -> prPrec i 0 (concatD [prt 0 basicdecl])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Basic_decl where
  prt i e = case e of
    Basic_decl1 id basicarraydims type_ -> prPrec i 0 (concatD [prt 0 id, prt 0 basicarraydims, doc (showString ":"), prt 0 type_])

instance Print Basic_array_dims where
  prt i e = case e of
    Basic_array_dims1 basicarraydims -> prPrec i 0 (concatD [doc (showString "["), doc (showString "]"), prt 0 basicarraydims])
    Basic_array_dims2 -> prPrec i 0 (concatD [])

instance Print Prog_body where
  prt i e = case e of
    Prog_body1 stmts -> prPrec i 0 (concatD [doc (showString "begin"), prt 0 stmts, doc (showString "end")])

instance Print Fun_body where
  prt i e = case e of
    Fun_body1 stmts expr -> prPrec i 0 (concatD [doc (showString "begin"), prt 0 stmts, doc (showString "return"), prt 0 expr, doc (showString ";"), doc (showString "end")])

instance Print Stmt where
  prt i e = case e of
    Stmt1 expr stmt1 stmt2 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 expr, doc (showString "then"), prt 0 stmt1, doc (showString "else"), prt 0 stmt2])
    Stmt2 expr stmt -> prPrec i 0 (concatD [doc (showString "while"), prt 0 expr, doc (showString "do"), prt 0 stmt])
    Stmt3 identifier -> prPrec i 0 (concatD [doc (showString "read"), prt 0 identifier])
    Stmt4 identifier expr -> prPrec i 0 (concatD [prt 0 identifier, doc (showString ":="), prt 0 expr])
    Stmt5 expr -> prPrec i 0 (concatD [doc (showString "print"), prt 0 expr])
    Stmt6 block -> prPrec i 0 (concatD [doc (showString "{"), prt 0 block, doc (showString "}")])
  prtList _ [] = (concatD [])
  prtList _ [] = (concatD [])
  prtList _ [] = (concatD [])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Identifier where
  prt i e = case e of
    Identifier1 id arraydims -> prPrec i 0 (concatD [prt 0 id, prt 0 arraydims])

instance Print Expr where
  prt i e = case e of
    Expr1 expr bintterm -> prPrec i 0 (concatD [prt 0 expr, doc (showString "||"), prt 0 bintterm])
    Expr2 bintterm -> prPrec i 0 (concatD [prt 0 bintterm])

instance Print Bint_term where
  prt i e = case e of
    Bint_term1 bintterm bintfactor -> prPrec i 0 (concatD [prt 0 bintterm, doc (showString "&&"), prt 0 bintfactor])
    Bint_term2 bintfactor -> prPrec i 0 (concatD [prt 0 bintfactor])

instance Print Bint_factor where
  prt i e = case e of
    Bint_factor1 bintfactor -> prPrec i 0 (concatD [doc (showString "not"), prt 0 bintfactor])
    Bint_factor2 intexpr1 compareop intexpr2 -> prPrec i 0 (concatD [prt 0 intexpr1, prt 0 compareop, prt 0 intexpr2])
    Bint_factor3 intexpr -> prPrec i 0 (concatD [prt 0 intexpr])

instance Print Compare_op where
  prt i e = case e of
    Compare_op1 -> prPrec i 0 (concatD [doc (showString "<")])
    Compare_op2 -> prPrec i 0 (concatD [doc (showString ">")])
    Compare_op3 -> prPrec i 0 (concatD [doc (showString "=<")])
    Compare_op4 -> prPrec i 0 (concatD [doc (showString ">=")])
    Compare_op5 -> prPrec i 0 (concatD [doc (showString "=")])

instance Print Int_expr where
  prt i e = case e of
    Int_expr1 intexpr addop intterm -> prPrec i 0 (concatD [prt 0 intexpr, prt 0 addop, prt 0 intterm])
    Int_expr2 intterm -> prPrec i 0 (concatD [prt 0 intterm])

instance Print Add_op where
  prt i e = case e of
    Add_op1 -> prPrec i 0 (concatD [doc (showString "+")])
    Add_op2 -> prPrec i 0 (concatD [doc (showString "-")])

instance Print Int_term where
  prt i e = case e of
    Int_term1 intterm mulop intfactor -> prPrec i 0 (concatD [prt 0 intterm, prt 0 mulop, prt 0 intfactor])
    Int_term2 intfactor -> prPrec i 0 (concatD [prt 0 intfactor])

instance Print Mul_op where
  prt i e = case e of
    Mul_op1 -> prPrec i 0 (concatD [doc (showString "*")])
    Mul_op2 -> prPrec i 0 (concatD [doc (showString "/")])

instance Print Int_factor where
  prt i e = case e of
    Int_factor1 expr -> prPrec i 0 (concatD [doc (showString "("), prt 0 expr, doc (showString ")")])
    Int_factor2 id basicarraydims -> prPrec i 0 (concatD [doc (showString "size"), doc (showString "("), prt 0 id, prt 0 basicarraydims, doc (showString ")")])
    Int_factor3 expr -> prPrec i 0 (concatD [doc (showString "float"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Int_factor4 expr -> prPrec i 0 (concatD [doc (showString "floor"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Int_factor5 expr -> prPrec i 0 (concatD [doc (showString "ceil"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Int_factor6 id modlist -> prPrec i 0 (concatD [prt 0 id, prt 0 modlist])
    Int_factor7 n -> prPrec i 0 (concatD [prt 0 n])
    Int_factor8 d -> prPrec i 0 (concatD [prt 0 d])
    Int_factor9 -> prPrec i 0 (concatD [doc (showString "true")])
    Int_factor10 -> prPrec i 0 (concatD [doc (showString "false")])
    Int_factor11 intfactor -> prPrec i 0 (concatD [doc (showString "-"), prt 0 intfactor])

instance Print Mod_list where
  prt i e = case e of
    Mod_list1 args -> prPrec i 0 (concatD [doc (showString "("), prt 0 args, doc (showString ")")])
    Mod_list2 arraydims -> prPrec i 0 (concatD [prt 0 arraydims])

instance Print Arg where
  prt i e = case e of
    Arg1 expr -> prPrec i 0 (concatD [prt 0 expr])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])

